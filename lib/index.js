"use strict";

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.insertAction = undefined;

var _ramda = require("ramda");

var R = _interopRequireWildcard(_ramda);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var chain = [{
	state: {},
	lookup: {}
}];

var insertAction = exports.insertAction = function insertAction(action) {
	var insertIndex = R.findIndex(R.pipe(R.path(["action", "meta", "time"]), R.lt(action.meta.time)), chain);

	chain = R.insert(insertIndex, {
		action: action
	}, chain);

	chain = R.scan(function (_ref, _ref2) {
		var state = _ref.state,
		    lookup = _ref.lookup;
		var action = _ref2.action;

		return Object.assign({}, R.reduce(function (_ref3, _ref4) {
			var state = _ref3.state,
			    lookup = _ref3.lookup;
			var type = _ref4.type,
			    path = _ref4.path,
			    value = _ref4.value;
			return R.evolve({
				state: type === "assoc" ? R.assocPath([action.meta.obj].concat(_toConsumableArray(path)), value) : R.dissocPath([action.meta.obj].concat(_toConsumableArray(path))),

				lookup: type === "assoc" ? R.assocPath([].concat(_toConsumableArray(path), [action.meta.obj]), value) : R.dissocPath([].concat(_toConsumableArray(path), [action.meta.obj]))
			})({ state: state, lookup: lookup });
		}, { state: state, lookup: lookup }, action.mutations), {
			action: action
		});
	}, R.head(chain), R.tail(chain));
};

var earlyAction = {
	meta: {
		time: 1415677760,
		action: "ba3ab7a5-e33f-4537-85a7-66d3fff04527",
		obj: "69581654-e60c-46cd-9f47-f29be6d81917"
	},
	mutations: [{
		type: "assoc",
		path: ["description"],
		value: "this is one description"
	}, {
		type: "assoc",
		path: ["tags", "test"],
		value: true
	}, {
		type: "assoc",
		path: ["tags", "personal"],
		value: true
	}]
};

var testAction = {
	meta: {
		time: 1515677760,
		action: "33a3bd64-0edd-4c45-af05-99987fcb1c02",
		obj: "ff734a42-ebf9-4f57-8bf9-549b8db7e7ee"
	},
	mutations: [{
		type: "assoc",
		path: ["description"],
		value: "need to buy more ham"
	}, {
		type: "assoc",
		path: ["tags", "money"],
		value: true
	}, {
		type: "assoc",
		path: ["tags", "personal"],
		value: true
	}]
};

var clearAction = {
	meta: {
		time: 1615677760,
		action: "33a3bd64-0edd-4c45-af05-99987fcb1c02",
		obj: "ff734a42-ebf9-4f57-8bf9-549b8db7e7ee"
	},
	mutations: [{
		type: "dissoc",
		path: ["description"],
		value: "need to buy more ham"
	}, {
		type: "dissoc",
		path: ["tags", "money"],
		value: true
	}]
};

insertAction(testAction);
insertAction(earlyAction);
insertAction(clearAction);

console.log(JSON.stringify(chain, null, 2));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,